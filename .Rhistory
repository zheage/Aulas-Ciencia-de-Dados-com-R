distinct(AlunosA, AlunosB)
View(AlunosA)
View(AlunosB)
AlunosA = data.frame(Alunos = c("Melissa", "Alex", "Renato"))
AlunosB = data.frame(Alunos = c("Melissa", "Ricardo", "Gabriel"))
distinct(AlunosA, AlunosB)
distinct(mtcars)
distinct(mtcars, cyl)
distinct(mtcars, c(cyl))
distinct(mtcars, c('cyl'))
cyl
distinct(mtcars, c(cyl))
mtcars
distinct(mtcars, c(hp, cyl))
distinct(mtcars, hp)
distinct(mtcars)
alunos = data.frame(Alunos = c("Gabriel",
"Gabriel",
"Renato"))
distinct(alunos)
mtcars %>%
sample_frac(0.7)
help(sample_frac)
mtcars %>%
sample_frac(0.7, replace = FALSE)
teste <- mtcars %>% filter(~treino)
treino <- mtcars %>% sample_frac(0.7, replace = FALSE)
teste <- mtcars %>% filter(~treino)
treino <- mtcars %>% sample_frac(0.7, replace = FALSE)
treino
treino != mtcars
treino == mtcars
~treino
mtcars %>%
slice(seq(10, 20, 2))
paged_table(mtcars %>%  slice(seq(10, 20, 2)),
options = list(rows.print = 6))
seq(10,20,2)
mtcars %>%
select(mpg)
mtcarrs
View(mtcars)
mtcars %>%
select(mpg, cyl, hp)
help(mtcars)
View(mtcars)
mtcars %>% select(num_range(1:5))
mtcars %>% select(1:5)
View(mtcars)
mtcars %>% select(-hp)
# Seleciona colunas cujo nome contém alguma string:
mtcars %>% select(contains("a"))
# Seleciona todas as colunas entre hp e gear:
mtcars %>% select(hp:gear)
pokemon_stats
pokemon_stats %>%
summarise(tot_mean = mean(Total))
pokemon_stats %>%
summarise(tot_mean = mean(Total),
tot_std = sd(Total))
View(pokemon_stats)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean, st)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean, sd)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(c(mean, sd))
c(mean, sd)
c('a', 'b')
names(c('a', 'b'))
names(c('a', 'b')) <- 1,2
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean)
count(mtcars, cyl)
| first |  min | median |
count(mtcars, cyl) # Similar ao table()
pokemon_stats %>%
mutate(Atacante = ifelse(Attack > 100 & Sp_Atk > 100, 1, 0))
# Vamos criar uma coluna retornando TRUE se o pokémon tiver Speed > 100
# e Attack ou Sp_Atk maior que 100:
pokemon_stats %>%
mutate(Atacante = ifelse((Attack > 100 & Speed > 100) |
(Sp_Atk > 100 & Speed > 100), TRUE, FALSE)) %>%
select(Atacante)
# Vamos criar uma coluna retornando TRUE se o pokémon tiver Speed > 100
# e Attack ou Sp_Atk maior que 100:
pokemon_stats %>%
mutate(Atacante = ifelse((Attack > 100 & Speed > 100) |
(Sp_Atk > 100 & Speed > 100), TRUE, FALSE)) %>%
select(Atacante)
# Vamos criar uma coluna retornando TRUE se o pokémon tiver Speed > 100
# e Attack ou Sp_Atk maior que 100:
pokemon_atacantes <- pokemon_stats %>%
mutate(Atacante = ifelse((Attack > 100 & Speed > 100) |
(Sp_Atk > 100 & Speed > 100), TRUE, FALSE))
pokemon_stats
View(pokemon_stats)
print('a')
library(dplyr) # Manipulação de dados
library(tidyr) # Modificação no formato de conjuntos de dados
library(ggplot2) # Visualização de gráficos
library(readr) # Biblioteca para leitura de dados
# library(tidyverse) Carrega todos os pacotes do tidyverse de uma vez,
# não é interessante para economia de memória.
library(rmarkdown)
library(knitr) # Tabelas para markdown
paged_table(mtcars,
options = list(rows.print = 6))
pokemon_stats <- read_csv("G:/Meu Drive/Dados/pokemon_stats.csv")
paged_table(pokemon_stats,
options = list(rows.print = 6))
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl", "Freq"))
condic_logica <- mtcars$cyl == 4
condic_logica
paged_table(filter(.data = mtcars, condic_logica),
options = list(rows.print = 6))
alunos = data.frame(Alunos = c("Gabriel",
"Gabriel",
"Renato"))
distinct(alunos)
mtcars %>%
filter((mtcars$cyl == 4) & (mtcars$hp > 100))
paged_table(mtcars %>%  slice(seq(10, 20, 2)),
options = list(rows.print = 6))
pokemon_stats %>%
summarise(tot_mean = mean(Total),
tot_std = sd(Total))
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas algumas colunas de atributos numéricos dos dados
summarise_each(mean)
count(mtcars, cyl) # Similar ao table()
paged_table(pokemon_stats %>%
mutate(Atacante = ifelse((Attack > 100 & Speed > 100) |
(Sp_Atk > 100 & Speed > 100), TRUE, FALSE)),
options = list(rows.print = 6))
# A variável Type_1 será considerada para o eixo x, enquanto a y ainda não foi definida:
ggplot(data = mtcars, aes(x = wt, y = mpg))
# ggplot(data = mtcars) também é uma opção válida!
# Porém aqui os eixos não serão criados.
pokemon_stats %>%
transmute(Pokemon_IMC = round(Height_m/Weight_kg^2,2))
View(pokemon_stats)
2.01/100
pokemon_stats %>%
transmute(Pokemon_IMC = round(Weight_kg / Height_m^2,2))
pokemon_stats %>%
transmute(Nome = Name,
Body_Style = Body_Style,
IMC = round(Weight_kg / Height_m^2,2))
pokemon_stats %>%
group_by(Type_1)
pokemon_stats %>%
group_by(Type_1) %>% # Agrupa por Tipo
summarise(Tot_mean = mean(TOtal))
pokemon_stats %>%
group_by(Type_1) %>% # Agrupa por Tipo
summarise(Tot_mean = mean(Total))
knitrr:opts_chunk$set(fig.align = "center")
knitr:opts_chunk$set(fig.align = "center")
library(knitr)
knitr:opts_chunk$set(fig.align = "center")
knitr::opts_chunk$set(fig.align = "center")
library(knitr)
knitr::opts_chunk$set(fig.align = "center")
fifa_basic <- read_csv("G:/Meu Drive/Dados/fifa_basic_info.csv")
library(dplyr) # Manipulação de dados
library(tidyr) # Modificação no formato de conjuntos de dados
library(ggplot2) # Visualização de gráficos
library(readr) # Biblioteca para leitura de dados
# library(tidyverse) Carrega todos os pacotes do tidyverse de uma vez,
# não é interessante para economia de memória.
library(rmarkdown)
library(knitr) # Tabelas para markdown
fifa_basic <- read_csv("G:/Meu Drive/Dados/fifa_basic_info.csv")
fifa_detailed <- read_csv("G:/Meu Drive/Dados/fifa_detailed_info.csv")
View(fifa_basic)
View(fifa_detailed)
install.packages('dplyr')
install.packages("dplyr")
install.packages('tidyr')
install.packages('ggplot2')
# install.packages('tidyverse') Instala todos os pacotes do tidyverse de uma vez
install.packages("tidyr")
install.packages("ggplot2")
library(dplyr) # Manipulação de dados
library(tidyr) # Modificação no formato de conjuntos de dados
library(ggplot2) # Visualização de gráficos
library(readr) # Biblioteca para leitura de dados
# library(tidyverse) Carrega todos os pacotes do tidyverse de uma vez,
# não é interessante para economia de memória.
library(rmarkdown)
library(knitr) # Tabelas para markdown
fifa_basic <- read_csv("G:/Meu Drive/Dados/fifa_basic_info.csv")
fifa_detailed <- read_csv("G:/Meu Drive/Dados/fifa_detailed_info.csv")
View(fifa_basic)
View(fifa_detailed)
# No parâmetro "by" passamos por qual variável queremos realizar o agrupamento
left_join(fifa_detailed, fifa_basic, by = 'ID')
# No parâmetro "by" passamos por a variável que queremos realizar o agrupamento
left_join(fifa_detailed, fifa_basic, by = 'ID')
# No parâmetro "by" passamos por a variável que queremos realizar o agrupamento
fifa_merged <- right_join(fifa_detailed, fifa_basic, by = 'ID')
fifa_merged <- inner_join(fifa_detailed, fifa_basic, by = 'ID')
View(fifa_merged)
fifa_merged <- inner_join(fifa_detailed, fifa_basic, by = 'ID')
View(fifa_merged)
View(fifa_detailed)
View(fifa_basic)
View(fifa_merged)
interset(fifa_basic, fifa_detailed)
intersect(fifa_basic, fifa_detailed)
union(fifa_basic, fifa_detailed)
bind_cols(fifa_basic, fifa_detailed)
pokemon_stats %>%
group_by(Type_1) %>% # Agrupa por Tipo
summarise(Tot_mean = mean(Total)) %>%
arrange()
pokemon_stats %>%
group_by(Type_1) %>% # Agrupa por Tipo
summarise(Tot_mean = mean(Total)) %>%
arrange(Tot_mean)
help(desc)
Pokemon_stats %>%
rename(Attack = Atk, Sp_Atk = Sp.Atk)
pokemon_stats <- read_csv("G:/Meu Drive/Dados/pokemon_stats.csv")
okemon_stats %>%
rename(Attack = Atk, Sp_Atk = Sp.Atk)
pokemon_stats %>%
rename(Attack = Atk, Sp_Atk = Sp.Atk)
View(pokemon_stats)
pokemon_stats %>%
rename(Atk = Attack, Sp.Atk = SpPAtk)
pokemon_stats %>%
rename(Atk = Attack, Sp.Atk = Sp_Atk)
pokemon_stats %>%
rename(Nome = Name, Tipo_I = Type_1, Tipo_2 = Type_2)
paged_table(pokemon_stats %>%
rename(Nome = Name, Tipo_I = Type_1, Tipo_2 = Type_2),
options = list(rows.print = 6,
max.print = 100))
simple_timeseries <- read_csv("G:/Meu Drive/Dados/simple_timeseries.csv")
simple_timeseries
View(fifa_detailed)
str(fifa_detailed$DOB)
class(fifa_detailed$DOB)
fifa_detailed$DOB
fifa_detailed$DOB <- as.Date(fifa_detailed$DOB, '%b %d, $Y')
View(fifa_detailed)
fifa_basic <- read_csv("G:/Meu Drive/Dados/fifa_basic_info.csv")
fifa_detailed <- read_csv("G:/Meu Drive/Dados/fifa_detailed_info.csv")
class(fifa_detailed$DOB)
as.Date(fifa_detailed$DOB, '%b %d, $Y')
as.Date(fifa_detailed$DOB, format = '%b %d, $Y')
fifa_detailed$DOB
as.Date(fifa_detailed$DOB, format = '%b %d, %Y')
View(fifa_detailed)
as.Date(fifa_detailed$DOB, format = '%b %d, %Y')
s = as.Date(fifa_detailed$DOB, format = '%b %d, %Y')
s
s
s = as.Date(fifa_detailed$DOB, format = '%b%d,%Y')
s = as.Date(fifa_detailed$DOB, format = '%b %d %Y')
s
s = as.Date(fifa_detailed$DOB, format = '%b %d, %Y')
View(fifa_detailed)
s
s = as.Date(fifa_detailed$DOB, format = '%b %d, %Y')
s = as.Date(fifa_detailed$DOB, format = '%B %d, %Y')
s
s = as.Date(fifa_detailed$DOB, format = '%b %d, %Y')
s = as.Date(fifa_detailed$DOB, format = '%b %d, %Y')
s[19]
fifa_detailed %>%
select(`Work Rate`)
fifa_detailed %>%
select(`Work rate`)
fifa_detailed %>%
select(`Work rate`) %>%
spread("/")
fifa_detailed %>%
select(`Work rate`) %>%
spread(value = "/")
fifa_detailed %>%
select(`Work rate`) %>%
separate(value = "/")
fifa_detailed %>%
select(`Work rate`) %>%
separate("/")
fifa_detailed %>%
select(`Work rate`) %>%
separate(sep = "/")
fifa_detailed %>%
select(`Work rate`)
fifa_detailed %>%
select(`Work rate`) %>%
separate(sep = "/")
fifa_detailed %>%
select(`Work rate`) %>%
separate(`Work rate`, sep = "/")
fifa_detailed %>%
separate(`Work rate`, sep = "/")
fifa_detailed %>%
separate(col = `Work rate`, sep = "/")
sep = "/")
fifa_detailed %>%
separate(col = `Work rate`,
into = c("Work1", "Work2"),
sep = "/")
paged_table(fifa_detailed %>%
separate(col = `Work rate`,
into = c("Work1", "Work2"),
sep = "/") %>%
select(Work1:Work2),
options = list(rows.print = 6,
max.print = 100))
paged_table(fifa_detailed %>%
select(Work rate),
paged_table(fifa_detailed %>%
select(`Work rate`),
options = list(rows.print = 6,
max.print = 100))
View(pokemon_stats)
View(fifa_detailed)
View(pokemon_stats)
View(fifa_detailed)
View(simple_timeseries)
View(fifa_basic)
fifa_separate <- fifa_detailed %>%
separate(col = `Work rate`,
into = c("Work1", "Work2"),
sep = "/")
fifa_separate %>%
unite(Work1, Work2)
fifa_separate %>%
unite(c(Work1, Work2))
fifa_separate %>%
unite(col = "Work rate", c(Work1, Work2), sep = "-")
fifa_separate %>%
unite(col = "Work rate", c(Work1, Work2), sep = "-") %>%
select(Work rate)
fifa_separate %>%
unite(col = "Work rate", c(Work1, Work2), sep = "-") %>%
select("Work rate")
setwd("G:/Meu Drive/Aulas")
paged_table(titanic_train,
options = list(rows.print = 6,
max.print = 100))
library(readr)
titanic_train <- read_csv("G:/Meu Drive/Dados/titanic_train.csv")
library(rmarkdown)
library(ggplot2)
library(tidyr)
library(dplyr)
paged_table(titanic_train,
options = list(rows.print = 6,
max.print = 100))
str(titanic_train)
View(titanic_train)
titanic_train <- titanic_train %>%
select(-c(PassengerId, Name, Ticket))
table(titanic_train$Cabin)
titanic_train <- titanic_train %>%
select(-c(PassengerId, Name, Ticket, Cabin))
library(readr)
titanic_train <- read_csv("G:/Meu Drive/Dados/titanic_train.csv")
str(titanic_train)
titanic_train <- titanic_train %>%
select(-c(PassengerId, Name, Ticket, Cabin))
summary(titanic_train)
length(titanic_train)
dim(titanic_train)
dim(titanic_train)[1]
177/dim(titanic_train)[1]
cols <- c(Survived, Pclass, SibSp, Parch, Embarked)
lapply(titanic_train[cols], factor)
cols <- c('Survived', 'Pclass', 'SibSp', 'Parch', 'Embarked')
lapply(titanic_train[cols], factor)
a = lapply(titanic_train[cols], factor)
a
cols <- c('Survived', 'Pclass', 'Embarked')
a = lapply(titanic_train[cols], factor)
summary(titanic_train)
titanic_train[cols] = lapply(titanic_train[cols], factor)
summary(titanic_train)
titanic_train %>%
drop_na(Embarked)
titanic_train <- titanic_train %>%
drop_na(Embarked)
help(na.agreggate)
help(replace_na)
mean(titanic_train$Age)
mean(titanic_train$Age, rm.na = T)
help(mean)
mean(titanic_train$Age, na.rm = T)
titanic_train %>%
replace_na(mean(titanic_train$Age, na.rm = T))
titanic_train$Age %>%
replace_na(mean(titanic_train$Age, na.rm = T))
titanic_train$Age <- titanic_train$Age %>%
replace_na(mean(titanic_train$Age, na.rm = T))
View(titanic_train)
help(replace_na)
View(titanic_train)
View(titanic_train)
View(titanic_train)
help(glm)
titanic_reg <- glm(Survived ~ ., data = titanic_train,
family = binomial)
titanic_test <- read_csv("G:/Meu Drive/Dados/titanic_test.csv")
predict(titanic_test, titanic_reg)
predict(titanic_test, titanic_rg)
predict(titanic_rg, titanic_test)
predict(titanic_reg, titanic_test)
View(titanic_train)
View(titanic_test)
summary(titanic_test)
titanic_test <- titanic_test %>%
select(-c(PassengerId, Name, Ticket, Cabin))
cols <- c('Survived', 'Pclass', 'Embarked')
titanic_test[cols] = lapply(titanic_test[cols], factor)
View(titanic_test)
cols <- c('Pclass', 'Embarked')
titanic_test[cols] = lapply(titanic_test[cols], factor)
titanic_test$Age <- titanic_test$Age %>%
replace_na(mean(titanic_test$Age, na.rm = T))
View(titanic_train)
View(titanic_test)
summary(titanic_test)
# A coluna Fare apresenta um valor NA e este será removido:
titanic_test <- titanic_test %>%
drop_na(Fare)
summary(titanic_test)
help(predict)
predict(titanic_reg, titanic_test)
titanic_reg <- glm(Survived ~ ., data = titanic_train,
family = binomial(link = 'logit'))
predict(titanic_reg, titanic_test)
predict(titanic_reg, titanic_test, type = "response")
probabilidades <- predict(titanic_reg, titanic_test, type = "response")
classes_prev <- ifelse(probabilidades > 0.5, 1, 0)
titanic_test
data.frame(PassengerId = 892:1309)
data.frame(PassengerId = 892:1309,
Survived = classes_prev)
classes_prev
892:1309
data.frame(PassengerId = 892:1308,
Survived = classes_prev)
classes_prev
length(classes_prev)
1309-892
data.frame(PassengerId = 892:1308,
Survived = classes_prev)
titanic_test <- read_csv("G:/Meu Drive/Dados/titanic_test.csv")
titanic_test <- titanic_test %>%
select(-c(PassengerId, Name, Ticket, Cabin))
cols <- c('Pclass', 'Embarked')
titanic_test[cols] = lapply(titanic_test[cols], factor)
titanic_test$Age <- titanic_test$Age %>%
replace_na(mean(titanic_test$Age, na.rm = T))
# A coluna Fare apresenta um valor NA e este será atribuído a moda:
titanic_test <- titanic_test %>%
replace_na(median(Fare, na.rm = T))
titanic_test$Fare
# A coluna Fare apresenta um valor NA e este será atribuído a média:
titanic_test <- titanic_test %>%
replace_na(mean(Fare, na.rm = T))
titanic_test$Fare
titanic_test <- read_csv("G:/Meu Drive/Dados/titanic_test.csv")
titanic_test <- titanic_test %>%
select(-c(PassengerId, Name, Ticket, Cabin))
cols <- c('Pclass', 'Embarked')
titanic_test[cols] = lapply(titanic_test[cols], factor)
titanic_test$Age <- titanic_test$Age %>%
replace_na(mean(titanic_test$Age, na.rm = T))
# A coluna Fare apresenta um valor NA e este será atribuído a média:
titanic_test <- titanic_test %>%
replace_na(mean(titanic_test$Fare, na.rm = T))
titanic_test <- read_csv("G:/Meu Drive/Dados/titanic_test.csv")
titanic_test <- titanic_test %>%
select(-c(PassengerId, Name, Ticket, Cabin))
cols <- c('Pclass', 'Embarked')
titanic_test[cols] = lapply(titanic_test[cols], factor)
titanic_test$Age <- titanic_test$Age %>%
replace_na(mean(titanic_test$Age, na.rm = T))
# A coluna Fare apresenta um valor NA e este será atribuído a média:
titanic_test$Fare <- titanic_test$Fare %>%
replace_na(mean(titanic_test$Fare, na.rm = T))
probabilidades <- predict(titanic_reg, titanic_test, type = "response")
classes_prev <- ifelse(probabilidades > 0.5, 1, 0)
data.frame(PassengerId = 892:1309,
Survived = classes_prev)
kaggle_titanic <- data.frame(PassengerId = 892:1309,
Survived = classes_prev)
write.csv(kaggle_titanic)
write.csv(kaggle_titanic)
write.csv(kaggle_titanic)
help("write.csv")
write.csv(kaggle_titanic,"G:\Meu Drive\Dados\kaggle_test", row.names = FALSE)
write.csv(kaggle_titanic,"kaggle_test", row.names = FALSE)
write.csv(kaggle_titanic,"kaggle_test.csv", row.names = FALSE)

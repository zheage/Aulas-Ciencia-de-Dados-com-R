a <- c(1,2,3)
b <- c(2,3,4)
a+b
a <- c(1,2,3)
b <- c(2,3,4)
a+b
a <- c(1,2,3)
b <- c(2,3,4)
a+b
a <- c(1,2,3)
b <- c(2,3,4)
a+b
a <- c(1,2,3)
b <- c(2,3,4)
a+b
a*b
hist(df_alunos$P4, breaks = seq(5, 10, 0.5))
# Bibliotecas
library(knitr)
library(ggplot2)
library(cowplot)
nome = c('Djoko','Wilson','Leon', 'Nilce')
est_civil = c('Solteiro','Casado', 'Casado', 'Casado')
escolaridade = c('Pós-graduação',
'Ensino médio completo',
'Pós-graduação',
'Superior completo')
n_filhos = c(0, 0, 0, 0)
salario = c(4500, 3000, 2000, 5500)
idade = c(29, 33, 39, 32)
df_youtubers = data.frame(nome, est_civil, escolaridade, n_filhos, salario, idade)
kable(df_youtubers, align = 'c',
caption = 'Dados sobre Youtubers.') # Melhor visualização dos dados para este PDF
median(df_youtubers$salario)
# apply: aplica uma função a um conjunto de dados
# MARGIN = 2: 1 para aplicar a função a todas as linhas e 2 a todas as colunas
# FUN: função a ser aplicada ao conjunto de dados
apply(df_youtubers[, c('n_filhos','salario','idade')], MARGIN = 2, FUN = median)
mean(df_youtubers$salario)
colMeans(df_youtubers[, c('idade', 'salario')])
nomes = c('alunoA', 'alunoB', 'alunoC',
'alunoD', 'alunoE')
notas = matrix(c(3,4,5,6,7,
1,3,5,7,9,
2,5,5,5,8,
3,5,5,5,7,
0,0,5,10,10), nrow = 5, ncol = 5, byrow = T)
df_alunos = data.frame(notas, row.names = nomes)
colnames(df_alunos) = c('P1', 'P2', 'P3', 'P4', 'P5')
kable(df_alunos, align = 'c')
rowMeans(df_alunos)
quantile(df_alunos$P1)
apply(df_alunos, 2, quantile, seq(0,1,.2))
boxplot(df_alunos)
apply(df_alunos, 2, quantile)
hist(df_alunos$P4, breaks = seq(5, 10, 0.5))
# Simula 500 dados de uma distribuição normal
dados_normal <- rnorm(n = 1000)
# Gráfico de suas frequências
hist(dados_normal)
dados_gamma <- rgamma(n = 300, shape = 1)
par(mfrow = c(2,2)) # MultiFrame rowwise layout
hist(dados_gamma)
hist(sqrt(dados_gamma))
hist(1/dados_gamma)
hist(log(dados_gamma))
# A função head() mostra os cinco primeiros itens de data.frame:
head(iris)
# O primeiro valor é a quantidade de linhas do conjunto de dados
# e o segundo a sua quantidade de atributos
dim(iris)
str(iris) # Structure of an Arbitrary R Object
summary(iris)
boxplot(iris$Sepal.Length)
ggplot(data = iris, aes(y = Sepal.Length)) +
geom_boxplot() +
labs(title = 'Boxplot Iris') +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
hist(iris$Sepal.Length)
ggplot(data = iris, aes(x = Sepal.Length, fill = ..count..)) +
geom_histogram(binwidth = 0.25, boundary = 0) +
scale_x_continuous(breaks = seq(1, 10, by = 0.25))
# Simula 500 dados de uma distribuição normal
dados_normal <- rnorm(n = 5000)
# Gráfico de suas frequências
hist(dados_normal)
# Simula 500 dados de uma distribuição normal
dados_normal <- rnorm(n = 10000)
# Gráfico de suas frequências
hist(dados_normal)
dados_gamma <- rgamma(n = 300, shape = 1)
par(mfrow = c(2,2)) # MultiFrame rowwise layout
hist(dados_gamma)
hist(sqrt(dados_gamma))
hist(1/dados_gamma)
hist(log(dados_gamma))
dados_gamma <- rgamma(n = 500, shape = 1)
par(mfrow = c(2,2)) # MultiFrame rowwise layout
hist(dados_gamma)
hist(sqrt(dados_gamma))
hist(1/dados_gamma)
hist(log(dados_gamma))
dados_gamma <- rgamma(n = 300, shape = 1)
par(mfrow = c(2,2)) # MultiFrame rowwise layout
hist(dados_gamma)
hist(sqrt(dados_gamma))
hist(1/dados_gamma)
hist(log(dados_gamma))
hist(1/dados_gamma, xlim = c(0,1))
dados_gamma <- rgamma(n = 300, shape = 1)
par(mfrow = c(2,2)) # MultiFrame rowwise layout
hist(dados_gamma)
hist(sqrt(dados_gamma))
hist(1/dados_gamma, xlim = c(0,1))
hist(log(dados_gamma))
dados_gamma <- rgamma(n = 300, shape = 1)
par(mfrow = c(2,2)) # MultiFrame rowwise layout
hist(dados_gamma)
hist(sqrt(dados_gamma))
hist(1/dados_gamma, xlim = c(0,2))
hist(log(dados_gamma))
dados_gamma <- rgamma(n = 300, shape = 1)
par(mfrow = c(2,2)) # MultiFrame rowwise layout
hist(dados_gamma)
hist(sqrt(dados_gamma))
hist(1/dados_gamma)
hist(log(dados_gamma))
1/dados_gamma
dados_gamma <- unif(n = 300)
dados_gamma <- runif(n = 300)
par(mfrow = c(2,2)) # MultiFrame rowwise layout
hist(dados_gamma)
hist(sqrt(dados_gamma))
hist(1/dados_gamma)
hist(log(dados_gamma))
dados_gamma <- rgamma(n = 300, shape = 1)
par(mfrow = c(2,2)) # MultiFrame rowwise layout
hist(dados_gamma)
hist(sqrt(dados_gamma))
hist(1/dados_gamma)
hist(log(dados_gamma))
qplot(dados_normal)
a = matriz(data = 1:9, nrow = 3, ncol = 3)
a
a = matrix(data = 1:9, nrow = 3, ncol = 3)
a
b = matrix(data = 1:9, nrow = 3, ncol = 3)
b = matrix(data = 1:9, nrow = 3, ncol = 3, byrow = T)
b
a + b
# a + b # Soma de matrizes
a * b
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
a.T
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
a.
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
t(a)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
solve(a)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
inv(a)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
i(a)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
sol(a)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
solve(a)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
solve(b)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
solve(b)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
inv(b)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
inv(b)
help(inv)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
det(b)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
det(a)
b = matrix(data = 3:12, nrow = 3, ncol = 3, byrow = T)
b = matrix(data = 3:11, nrow = 3, ncol = 3, byrow = T)
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
det(b) Determinante de uma matriz
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
det(b)# Determinante de uma matriz
help(inv)
help(solve)
# a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
a %*% # Multiplicação de matrizes
# t(a) # Transposta da matriz
# det(a) Determinante de uma matriz
# a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
a %*% b # Multiplicação de matrizes
b = matrix(data = 1:9, nrow = 3, ncol = 3, byrow = T)
# a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
a %*% b # Multiplicação de matrizes
# a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
# a %*% b # Multiplicação de matrizes
# t(a) # Transposta da matriz
# det(a) # Determinante de uma matriz
# solve(a) # Inversa da matriz
sqrt(a) # Raiz quadrada dos elementos da matriz
boxplot(df_alunos, xlab = "Provas")
boxplot(df_alunos, xlab = "Provas", ylab = "Notas")
boxplot(df_alunos, xlab = "Provas", ylab = "Notas",
main = "Boxplot dos alunos")
library(readr)
titanic_train <- read_csv("G:/Meu Drive/Dados/titanic_train.csv")
View(titanic_train)
titanic_train
kable(head(titanic_train), align = 'c')
table(titanic_train$Survived)
mean(titanic_train$Age)
mean(titanic_train$Age)
titanic_train$Age
mean(titanic_train$Age.na.rm)
mean(titanic_train$Age)
mean(titanic_train$Age, na.rm = TRUE)
help(mean)
str(titanic_train)
summary(titanic_train)
kable(summary(titanic_train), align = 'c')
```{r}
kable(head(titanic_train), align = 'c')
kable(head(titanic_train), align = 'c')
kable(head(titanic_train), align = 'c')
str(titanic_train)

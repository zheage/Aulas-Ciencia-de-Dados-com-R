# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
det(b) Determinante de uma matriz
# a + b # Soma de matrizes
# a * b # Multiplicação de matrizes
# t(a) # Transposta da matriz
det(b)# Determinante de uma matriz
help(inv)
help(solve)
# a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
a %*% # Multiplicação de matrizes
# t(a) # Transposta da matriz
# det(a) Determinante de uma matriz
# a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
a %*% b # Multiplicação de matrizes
b = matrix(data = 1:9, nrow = 3, ncol = 3, byrow = T)
# a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
a %*% b # Multiplicação de matrizes
# a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
# a %*% b # Multiplicação de matrizes
# t(a) # Transposta da matriz
# det(a) # Determinante de uma matriz
# solve(a) # Inversa da matriz
sqrt(a) # Raiz quadrada dos elementos da matriz
boxplot(df_alunos, xlab = "Provas")
boxplot(df_alunos, xlab = "Provas", ylab = "Notas")
boxplot(df_alunos, xlab = "Provas", ylab = "Notas",
main = "Boxplot dos alunos")
library(readr)
titanic_train <- read_csv("G:/Meu Drive/Dados/titanic_train.csv")
View(titanic_train)
titanic_train
kable(head(titanic_train), align = 'c')
table(titanic_train$Survived)
mean(titanic_train$Age)
mean(titanic_train$Age)
titanic_train$Age
mean(titanic_train$Age.na.rm)
mean(titanic_train$Age)
mean(titanic_train$Age, na.rm = TRUE)
help(mean)
str(titanic_train)
summary(titanic_train)
kable(summary(titanic_train), align = 'c')
```{r}
kable(head(titanic_train), align = 'c')
kable(head(titanic_train), align = 'c')
kable(head(titanic_train), align = 'c')
str(titanic_train)
x <- c(1,2,3,4)
x
x <- seq(1,9)
x
x <- 1:9
x
x <- seq(1,9, 2)
x
help(c)
mat = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2,
byrow = TRUE)
mat
mat = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
mat
x <- c(1,2,3,4)
x
mat = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
mat
a = matrix(data = 1:9, nrow = 3, ncol = 3)
a
b = matrix(data = 1:9, nrow = 3, ncol = 3, byrow = T)
b
a + b # Soma de matrizes
#a + b # Soma de matrizes
a * b # Multiplicação dos elementos das matrizes termo a termo
a
b
#a + b # Soma de matrizes
a * b # Multiplicação dos elementos das matrizes termo a termo
#a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
a %*% b # Multiplicação de matrizes
a
#a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
# a %*% b # Multiplicação de matrizes
t(a) # Transposta da matriz
#a + b # Soma de matrizes
# a * b # Multiplicação dos elementos das matrizes termo a termo
# a %*% b # Multiplicação de matrizes
# t(a) # Transposta da matriz
det(a) # Determinante de uma matriz
sqrt(a) # Raiz quadrada dos elementos da matriz
help(matrix)
nomes = c('Carol', 'Alfredo', 'Godoberto')
nomes
nomes = c('Carol', 'Alfredo', 'Godoberto')
nomes = c('Carol', 'Alfredo', 'Godoberto')
nomes
nomes = c('Carol', 'Alfredo', 'Godoberto')
nomes
idade = c(18, 23, 19)
peso = c(69, 75, 80)
altura = c(1.70, 1.80, 1.85)
IMC = peso/altura^2
IMC
df = data.frame(nomes, idade, peso, altura, ICM)
df
df = data.frame(nomes, idade, peso, altura, IMC)
df
nome = c('Djoko','Wilson','Leon', 'Nilce')
est_civil = c('Solteiro','Casado', 'Casado', 'Casado')
escolaridade = c('Pós-graduação',
'Ensino médio completo',
'Pós-graduação',
'Superior completo')
n_filhos = c(0, 0, 0, 0)
salario = c(4500, 3000, 2000, 5500)
idade = c(29, 33, 39, 32)
df_youtubers = data.frame(nome, est_civil, escolaridade, n_filhos, salario, idade)
kable(df_youtubers, align = 'c',
caption = 'Dados sobre Youtubers.') # Melhor visualização dos dados para este PDF
nome = c('Djoko','Wilson','Leon', 'Nilce')
est_civil = c('Solteiro','Casado', 'Casado', 'Casado')
escolaridade = c('Pós-graduação',
'Ensino médio completo',
'Pós-graduação',
'Superior completo')
n_filhos = c(0, 0, 0, 0)
salario = c(4500, 3000, 2000, 5500)
idade = c(29, 33, 39, 32)
df_youtubers = data.frame(nome, est_civil, escolaridade, n_filhos, salario, idade)
df_youtubers
df_youtubers
nome = c('Djoko','Wilson','Leon', 'Nilce')
est_civil = c('Solteiro','Casado', 'Casado', 'Casado')
escolaridade = c('Pós-graduação',
'Ensino médio completo',
'Pós-graduação',
'Superior completo')
n_filhos = c(0, 0, 0, 0)
salario = c(4500, 3000, 2000, 5500)
idade = c(29, 33, 39, 32)
df_youtubers = data.frame(nome, est_civil, escolaridade, n_filhos, salario, idade)
df_youtubers
View(df_youtubers)
install.packages(dplyr)
install.packages(tidyr)
install.packages(ggplot2)
install.packages('ggplot2')
install.packages(dplyr)
install.packages('dplyr')
install.packages('tidyr')
install.packages('dplyr')
install.packages('ggplot2')
install.packages("dplyr")
install.packages("ggplot2")
libraries('dplyr', 'tidyr', 'ggplot2')
library(easypackages)
libraries('dplyr', 'tidyr', 'ggplot2')
pokemon_stats <- read_csv("G:/Meu Drive/Dados/pokemon_stats.csv")
library(readr)
pokemon_stats <- read_csv("G:/Meu Drive/Dados/pokemon_stats.csv")
pokemon_stats <- read_csv("G:/Meu Drive/Dados/pokemon_stats.csv")
```{r, message = FALSE}
pokemon_stats <- read_csv("G:/Meu Drive/Dados/pokemon_stats.csv")
kable(pokemon_stats)
library(knitr)
kable(pokemon_stats)
kable(head(pokemon_stats), align = 'c', full_width = FALSE)
View(pokemon_stats)
seq(1,6)
kable(head(pokemon_stats[seq(1,8)]), align = 'c', full_width = FALSE)
paged_table(pokemon_stats)
library(rmarkdown)
paged_table(pokemon_stats)
library(rmarkdown)
paged_table(pokemon_stats,
options = list(rows.print = 6))
mtcars
help(mtcars)
mtcars
```{r, echo = FALSE}
mtcars
mtcars
# help(mtcars) Para entender melhor sobre o conjunto de dados assim como seus atributos
mtcars
# help(mtcars) Para entender melhor sobre o conjunto de dados assim como seus atributos
ggplot(data = pokemon_stats)
View(pokemon_stats)
ggplot(data = pokemon_stats, aes(x = `Type 1`, Total))
View(pokemon_stats)
ggplot(data = pokemon_stats, aes(x = Type_1, Total))
ggplot(data = pokemon_stats, aes(x = Type_1))
mtcars
# A variável Type_1 será considerada para o eixo x, enquanto a y ainda não foi definida:
ggplot(data = mtcars, aes(x = wt, y = mpg))
mtcars
class(mtcars)
tbl_df(mtcars)
class(tbl_df(mtcars))
tbl_df(mtcars)
mtcars
tbl_df(mtcars)
mtcars
tbl_df(mtcars)
mtcars
tbl_df(mtcars)
a = tbl_df(mtcars)
View(a)
mtcars
View(mtcars)
help(tbl_df)
View(a)
mtcars_tbl = tbl_df(mtcars)
mtcars_tbl
glimpse(mtcars)
str(mtcars)
glimpse(mtcars)
help(mtcars)
table(mtcars$mpg)
table(mtcars$cyl)
View(mtcars)
kable(table(mtcars$cyl), align = 'c')
table(mtcars$cyl)
help9table
help(table)
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl", "Frequência"))
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl", "Frequência"))
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl"))
kable(table(mtcars$cyl), align = 'c')
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl", "Frequência"))
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl", "Frequencia"))
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl", "Freq"))
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl", "Freq"))
condic_logica <- (mtcars$cyl == 4)
condic_logica
help(filter)
filter(.data = mtg, condic_logica)
filter(.data = mpg, condic_logica)
mtg
mpg
filter(.data = mpg, condic_logica)
filter(.data = mpg$cyl, condic_logica)
condic_logica <- mtcars$cyl == 4
condic_logica
mtcars
mpg
mtg
mtcars
help(mtcars)
help(mpg)
filter(.data = mtcars, condic_logica)
paged_table(filter(.data = mtcars, condic_logica),
options = list(rows.print = 6))
filter(.data = mtcars, condic_logica)
help(filter)
```{r, echo = FALSE}
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl", "Freq"))
condic_logica <- mtcars$cyl == 4
condic_logica
help(mtcars)
mtcars
filter(.data = mtcars, mtcars$cyl == 4, mtcars$hp > 100)
# Também podemos realizar
filter(.data = mtcars, mtcars$cyl == 4 | mtcars$hp > 100)
filter(.data = mtcars, mtcars$cyl == 4, mtcars$hp > 100)
# Também podemos realizar
filter(.data = mtcars, mtcars$cyl == 4 | mtcars$hp > 100)
# Também podemos realizar
b = filter(.data = mtcars, mtcars$cyl == 4 | mtcars$hp > 100)
a == b
# Também podemos realizar
filter(.data = mtcars, mtcars$cyl == 4 & mtcars$hp > 100)
# Também podemos realizar
B = filter(.data = mtcars, mtcars$cyl == 4 & mtcars$hp > 100)
a
A
B
A = filter(.data = mtcars, mtcars$cyl == 4, mtcars$hp > 100)
# Também podemos realizar
B = filter(.data = mtcars, mtcars$cyl == 4 & mtcars$hp > 100)
A
B
A == B
A = filter(.data = mtcars, mtcars$cyl == 4, mtcars$hp > 100)
# Também podemos realizar
B = filter(.data = mtcars, mtcars$cyl == 4 | mtcars$hp > 100)
B
A
mtcars %>%
filter(mtcars$cyl == 4, mtcars$hp > 100)
mtcars %>%
filter(mtcars$cyl == 4 & mtcars$hp > 100)
distinct(mtcars)
distinct(mtcars)
help(distinct)
distinct(alunosA, alunosB)
distinct(alunosA, alunosB)
AlunosA = c("Melissa", "Alex", "Renato")
AlunosB = c("Melissa", "Ricardo", "Gabriel")
distinct(alunosA, alunosB)
AlunosA = c("Melissa", "Alex", "Renato")
AlunosB = c("Melissa", "Ricardo", "Gabriel")
distinct(alunosA, alunosB)
AlunosA = c("Melissa", "Alex", "Renato")
AlunosB = c("Melissa", "Ricardo", "Gabriel")
distinct(alunosA, alunosB)
data.frame(alunosA)
alunosA
AlunosA = c("Melissa", "Alex", "Renato")
AlunosB = c("Melissa", "Ricardo", "Gabriel")
distinct(alunosA, alunosB)
distinct(AlunosA, AlunosB)
AlunosA = c("Melissa", "Alex", "Renato")
AlunosB = c("Melissa", "Ricardo", "Gabriel")
distinct(AlunosA, AlunosB)
AlunosA = data.frame(c("Melissa", "Alex", "Renato"))
AlunosB = data.frame(c("Melissa", "Ricardo", "Gabriel"))
AlunosA
AlunosB = data.frame(Alunos = c("Melissa", "Ricardo", "Gabriel"))
AlunosB
AlunosA
distinct(AlunosA, AlunosB)
AlunosA = data.frame(Alunos = c("Melissa", "Alex", "Renato"))
AlunosB = data.frame(Alunos = c("Melissa", "Ricardo", "Gabriel"))
distinct(AlunosA, AlunosB)
View(AlunosA)
View(AlunosB)
AlunosA = data.frame(Alunos = c("Melissa", "Alex", "Renato"))
AlunosB = data.frame(Alunos = c("Melissa", "Ricardo", "Gabriel"))
distinct(AlunosA, AlunosB)
distinct(mtcars)
distinct(mtcars, cyl)
distinct(mtcars, c(cyl))
distinct(mtcars, c('cyl'))
cyl
distinct(mtcars, c(cyl))
mtcars
distinct(mtcars, c(hp, cyl))
distinct(mtcars, hp)
distinct(mtcars)
alunos = data.frame(Alunos = c("Gabriel",
"Gabriel",
"Renato"))
distinct(alunos)
mtcars %>%
sample_frac(0.7)
help(sample_frac)
mtcars %>%
sample_frac(0.7, replace = FALSE)
teste <- mtcars %>% filter(~treino)
treino <- mtcars %>% sample_frac(0.7, replace = FALSE)
teste <- mtcars %>% filter(~treino)
treino <- mtcars %>% sample_frac(0.7, replace = FALSE)
treino
treino != mtcars
treino == mtcars
~treino
mtcars %>%
slice(seq(10, 20, 2))
paged_table(mtcars %>%  slice(seq(10, 20, 2)),
options = list(rows.print = 6))
seq(10,20,2)
mtcars %>%
select(mpg)
mtcarrs
View(mtcars)
mtcars %>%
select(mpg, cyl, hp)
help(mtcars)
View(mtcars)
mtcars %>% select(num_range(1:5))
mtcars %>% select(1:5)
View(mtcars)
mtcars %>% select(-hp)
# Seleciona colunas cujo nome contém alguma string:
mtcars %>% select(contains("a"))
# Seleciona todas as colunas entre hp e gear:
mtcars %>% select(hp:gear)
pokemon_stats
pokemon_stats %>%
summarise(tot_mean = mean(Total))
pokemon_stats %>%
summarise(tot_mean = mean(Total),
tot_std = sd(Total))
View(pokemon_stats)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean, st)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean, sd)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean)
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(c(mean, sd))
c(mean, sd)
c('a', 'b')
names(c('a', 'b'))
names(c('a', 'b')) <- 1,2
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas colunas numéricas dos dados
summarise_each(mean)
count(mtcars, cyl)
| first |  min | median |
count(mtcars, cyl) # Similar ao table()
pokemon_stats %>%
mutate(Atacante = ifelse(Attack > 100 & Sp_Atk > 100, 1, 0))
# Vamos criar uma coluna retornando TRUE se o pokémon tiver Speed > 100
# e Attack ou Sp_Atk maior que 100:
pokemon_stats %>%
mutate(Atacante = ifelse((Attack > 100 & Speed > 100) |
(Sp_Atk > 100 & Speed > 100), TRUE, FALSE)) %>%
select(Atacante)
# Vamos criar uma coluna retornando TRUE se o pokémon tiver Speed > 100
# e Attack ou Sp_Atk maior que 100:
pokemon_stats %>%
mutate(Atacante = ifelse((Attack > 100 & Speed > 100) |
(Sp_Atk > 100 & Speed > 100), TRUE, FALSE)) %>%
select(Atacante)
# Vamos criar uma coluna retornando TRUE se o pokémon tiver Speed > 100
# e Attack ou Sp_Atk maior que 100:
pokemon_atacantes <- pokemon_stats %>%
mutate(Atacante = ifelse((Attack > 100 & Speed > 100) |
(Sp_Atk > 100 & Speed > 100), TRUE, FALSE))
pokemon_stats
View(pokemon_stats)
print('a')
library(dplyr) # Manipulação de dados
library(tidyr) # Modificação no formato de conjuntos de dados
library(ggplot2) # Visualização de gráficos
library(readr) # Biblioteca para leitura de dados
# library(tidyverse) Carrega todos os pacotes do tidyverse de uma vez,
# não é interessante para economia de memória.
library(rmarkdown)
library(knitr) # Tabelas para markdown
paged_table(mtcars,
options = list(rows.print = 6))
pokemon_stats <- read_csv("G:/Meu Drive/Dados/pokemon_stats.csv")
paged_table(pokemon_stats,
options = list(rows.print = 6))
kable(table(mtcars$cyl), align = 'c',
col.names = c("Cyl", "Freq"))
condic_logica <- mtcars$cyl == 4
condic_logica
paged_table(filter(.data = mtcars, condic_logica),
options = list(rows.print = 6))
alunos = data.frame(Alunos = c("Gabriel",
"Gabriel",
"Renato"))
distinct(alunos)
mtcars %>%
filter((mtcars$cyl == 4) & (mtcars$hp > 100))
paged_table(mtcars %>%  slice(seq(10, 20, 2)),
options = list(rows.print = 6))
pokemon_stats %>%
summarise(tot_mean = mean(Total),
tot_std = sd(Total))
pokemon_stats %>%
select(Total:Speed) %>% # Vamos selecionar apenas algumas colunas de atributos numéricos dos dados
summarise_each(mean)
count(mtcars, cyl) # Similar ao table()
paged_table(pokemon_stats %>%
mutate(Atacante = ifelse((Attack > 100 & Speed > 100) |
(Sp_Atk > 100 & Speed > 100), TRUE, FALSE)),
options = list(rows.print = 6))
# A variável Type_1 será considerada para o eixo x, enquanto a y ainda não foi definida:
ggplot(data = mtcars, aes(x = wt, y = mpg))
# ggplot(data = mtcars) também é uma opção válida!
# Porém aqui os eixos não serão criados.
pokemon_stats %>%
transmute(Pokemon_IMC = round(Height_m/Weight_kg^2,2))
View(pokemon_stats)
2.01/100
pokemon_stats %>%
transmute(Pokemon_IMC = round(Weight_kg / Height_m^2,2))
pokemon_stats %>%
transmute(Nome = Name,
Body_Style = Body_Style,
IMC = round(Weight_kg / Height_m^2,2))
pokemon_stats %>%
group_by(Type_1)
pokemon_stats %>%
group_by(Type_1) %>% # Agrupa por Tipo
summarise(Tot_mean = mean(TOtal))
pokemon_stats %>%
group_by(Type_1) %>% # Agrupa por Tipo
summarise(Tot_mean = mean(Total))
knitrr:opts_chunk$set(fig.align = "center")
knitr:opts_chunk$set(fig.align = "center")
library(knitr)
knitr:opts_chunk$set(fig.align = "center")
knitr::opts_chunk$set(fig.align = "center")
library(knitr)
knitr::opts_chunk$set(fig.align = "center")
